{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"PySpaceMouse","text":"<p>\ud83c\udfae Multiplatform Python library for 3Dconnexion SpaceMouse devices using raw HID.</p> <p>3Dconnexion Space Mouse in Python using raw HID. Note: you don't need to install or use any of the drivers or 3Dconnexion software to use this package. It interfaces with the controller directly with <code>hidapi</code> and python wrapper library <code>easyhid</code>.</p> <p> </p> <p>PySpaceMouse is forked from: johnhw/pyspacenavigator</p> <p>Implements a simple interface for 6 DoF 3Dconnexion Space Mouse device as well as similar devices.</p> <p> Control Robo Arm with a Space Mouse.</p>"},{"location":"#supported-3dconnexion-devices","title":"Supported 3Dconnexion devices","text":"<ul> <li>SpaceNavigator</li> <li>SpaceMouse Pro</li> <li>SpaceMouse Pro Wireless</li> <li>SpaceMouse Wireless</li> <li>3Dconnexion Universal Receiver</li> <li>SpaceMouse Compact</li> <li>SpacePilot</li> <li>SpacePilot Pro</li> <li>SpaceMouse Enterprise</li> <li>Add more devices</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Use the package manager pip to install pyspacemouse. If you are using a Mac with an ARM processor, you'll need a patched version of <code>easyhid</code>.</p> <pre><code># Install package\npip install pyspacemouse\n\n# Only needed for ARM MacOs\npip install git+https://github.com/bglopez/python-easyhid.git\n</code></pre>"},{"location":"#dependencies-required","title":"Dependencies (required)","text":"<p>The library uses <code>hidapi</code> as low-level interface to the device and <code>easyhid</code> as a Python abstraction for easier use.</p>"},{"location":"#hidapi-is-c-library-for-direct-communication-with-hid-devices","title":"hidapi is <code>C</code> library for direct communication with HID devices","text":""},{"location":"#linux","title":"Linux","text":"<ul> <li>libhidapi-dev to access HID data</li> <li><code>sudo apt-get install libhidapi-dev</code> (Debian/Ubuntu)</li> <li> <p>Compile and install hidapi.  (other Linux   distributions)</p> </li> <li> <p>add rules for permissions     <pre><code>sudo echo 'KERNEL==\"hidraw*\", SUBSYSTEM==\"hidraw\", MODE=\"0664\", GROUP=\"plugdev\"' &gt; /etc/udev/rules.d/99-hidraw-permissions.rules\nsudo usermod -aG plugdev $USER\nnewgrp plugdev\n</code></pre> Aleternative option - with tee (RPi) <pre>\n    echo 'KERNEL==\"hidraw*\", SUBSYSTEM==\"hidraw\", MODE=\"0664\", GROUP=\"plugdev\"' | sudo tee /etc/udev/rules.d/99-hidraw-permissions.rules\n    sudo usermod -aG plugdev $USER\n    newgrp plugdev\n    </pre> </p> </li> </ul>"},{"location":"#windows","title":"Windows","text":"<ul> <li>Install the latest release of hidapi.dll and hidapi.lib from   the hidapi releases page.</li> <li>Set system environment: add absolute path for <code>x64</code> or <code>x86</code> folder in Path.</li> <li>More info on Troubleshooting - WIndows page.</li> </ul>"},{"location":"#mac-os-x-m1","title":"Mac OS X (M1)","text":"<ul> <li>Install from Homebrew</li> <li><code>brew install hidapi</code></li> <li>Add hidapi to your <code>DYLD_LIBRARY_PATH</code> directory.     <pre><code>export DYLD_LIBRARY_PATH=/opt/homebrew/Cellar/hidapi/0.14.0/lib:$DYLD_LIBRARY_PATH\n</code></pre></li> <li>On MacOS M1 you will need patched version of easyhid. If easyhid is already installed, please uninstall it first.     <pre><code>pip install git+https://github.com/bglopez/python-easyhid.git\n</code></pre></li> <li>In case of problem with M1 chip, try to run you code with Rosseta 2<ul> <li>How to use Rosseta 2 - Setup Rosetta</li> </ul> </li> <li>Tested and developed by consi - thanks!</li> <li>More info on Troubleshooting - Mac OS (M1) page.</li> </ul>"},{"location":"#easyhid-is-hidapi-interface-for-python-required-on-all-platforms","title":"easyhid is <code>hidapi</code> interface for Python - required on all platforms","text":"<ul> <li><code>pip install git+https://github.com/bglopez/python-easyhid.git</code></li> <li>this fork fix problems with <code>hidapi</code> on MacOS.</li> <li>on other platforms it possible works with original package <code>pip install easyhid</code></li> </ul>"},{"location":"#basic-usage","title":"Basic Usage:","text":"<p>If the 3Dconnexion driver is installed, please ensure to stop <code>3DconnexionHelper</code> before running your python scripts.</p>"},{"location":"#basic-example","title":"Basic example","text":"<p><pre><code>import pyspacemouse\nimport time\n\nsuccess = pyspacemouse.open(dof_callback=pyspacemouse.print_state, button_callback=pyspacemouse.print_buttons)\nif success:\n    while 1:\n        state = pyspacemouse.read()\n        time.sleep(0.01)\n</code></pre> More examples can be found in the /examples directory or in page with Examples.</p>"},{"location":"#available-cli-test-commands","title":"Available CLI test commands","text":"<pre><code>usage: pyspacemouse [-h] [--version] [--list-spacemouse]\n                    [--list-supported-devices] [--list-all-hid-devices]\n                    [--test-connect]\n\nPySpaceMouse CLI\n\noptions:\n  -h, --help            show this help message and exit\n  --version             Version of pyspacemouse\n  --list-spacemouse     List connected SpaceMouse devices\n  --list-supported-devices\n                        List supported SpaceMouse devices\n  --list-all-hid-devices\n                        List all connected HID devices\n  --test-connect        Test connect to the first available device\n\nFor more information, visit https://spacemouse.kubaandrysek.cz\n</code></pre>"},{"location":"#troubleshooting","title":"Troubleshooting","text":"<p>Look at the Troubleshooting page for help with common issues.</p>"},{"location":"#references","title":"References","text":"<p>PySpaceMouse is used in the following projects:</p> <ul> <li>PySpaceApp - Control your PC with SpaceMouse (basic hotkeys, mouse control, and more)</li> <li>TeleMoMa - A Modular and Versatile Teleoperation System for Mobile Manipulation</li> <li>SERL - SERL: A Software Suite for Sample-Efficient Robotic Reinforcement Learning<ul> <li></li> </ul> </li> <li>Pancake Robot- An integration of the Ufactory Lite 6 robot arm with kitchenware to make pancakes.</li> <li>GELLO - GELLO: A General, Low-Cost, and Intuitive Teleoperation Framework for Robot Manipulators<ul> <li></li> </ul> </li> <li>spacepad - A simple python script that turns a spacemouse device into a standard gamepad</li> <li>arm_xarm</li> </ul>"},{"location":"CONTRIBUTING/","title":"Development guide","text":""},{"location":"CONTRIBUTING/#adding-new-features","title":"Adding new features","text":"<ol> <li>Create a new branch from <code>master</code> with a descriptive name.</li> <li>Implement your feature.</li> <li>Create a pull request to <code>master</code> and assign a reviewer.</li> <li>The reviewer will review your code and merge it into <code>master</code>.</li> </ol>"},{"location":"CONTRIBUTING/#how-to-write-documentation","title":"How to write documentation","text":"<p>To install the required dependencies, run <code>pip install pyspacemouse[develop]</code>.</p> <p>Edit <code>README.md</code> only in the root folder. The documentation is automatically generated from <code>README.md</code> and <code>docs/</code> folder. To update documentation from root to <code>/docs</code> use macro <code>make fixRelativeLinkDocs</code> which will replace all relative links from <code>/</code> to <code>/docs</code> folder.</p>"},{"location":"CONTRIBUTING/#building-the-documentation","title":"Building the documentation","text":"<p>The documentation is built using mkdocs. To test the documentation locally, run <code>make docs-serve</code> and open http://localhost:8000 in your browser.</p>"},{"location":"CONTRIBUTING/#deploying-the-documentation","title":"Deploying the documentation","text":"<p>The documentation is deployed automatically using GitHub Actions. Just push to the <code>master</code> branch and the documentation will be updated automatically.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>If you encounter any issues, you can find help in the following section.</p>"},{"location":"troubleshooting/#common-issues","title":"Common issues","text":""},{"location":"troubleshooting/#modulenotfounderror-no-module-named-easyhid","title":"ModuleNotFoundError: No module named 'easyhid'","text":"<ul> <li>Install <code>easyhid</code> by <code>pip install easyhid</code>.</li> </ul>"},{"location":"troubleshooting/#attributeerror-functionsymbol-hid_enumerate-not-found-in-library-python3-undefined-symbol-hid_enumerate","title":"AttributeError: function/symbol 'hid_enumerate' not found in library '': python3: undefined symbol: hid_enumerate <ul> <li>HID library for your computer is not installed.</li> <li>Follow the instructions in requirements.</li> </ul>","text":""},{"location":"troubleshooting/#mac-os-m1","title":"Mac OS (M1)","text":"<p>External dependencies</p> <p>You don't have to install original 3Dconnexion driver <code>3DxWare 10</code>. This library works directly with <code>hidapi</code> device interface.</p> <p>If you are using a Mac with an M1 chip or newer, you may encounter issues when installing the dependencies. Required dependency is <code>hidapi</code> which you can install using Homebrew <code>brew install hidapi</code>.</p> <p>By  default, the <code>hidapi</code> library is installed in <code>/opt/homebrew/Cellar/hidapi/0.14.0/lib</code> directory, and you need to add it to your <code>DYLD_LIBRARY_PATH</code> environment variable. It is possible to add it to your <code>.bashrc</code> or <code>.zshrc</code> file, but you can also add it directly in the terminal (only for the current session).</p> <p>Replace <code>0.14.0</code> with the version you have installed on your system (<code>brew info hidapi</code>). <pre><code>export DYLD_LIBRARY_PATH=/opt/homebrew/Cellar/hidapi/0.14.0/lib:$DYLD_LIBRARY_PATH\n</code></pre></p> <p>In case of changes in MacOS M1, architecture name, you have to use patched version of <code>easyhid</code> library. Updated version is not yet available on PyPi, so you have to uninstall the current version and install the patched version from GitHub. <pre><code>pip install git+https://github.com/bglopez/python-easyhid.git\n</code></pre></p> <p>After this setup everything works correctly directly on MacOS M1. Tested on:</p> <ul> <li>MacBook Pro 14 (M1 Pro, 2021)</li> <li>??? (add your device and feedback)</li> </ul> <p>I have probably tested it also in Rosetta 2 mode, but right now it works directly on M1 chip with python from <code>brew</code>.</p>"},{"location":"troubleshooting/#testing-hidapi","title":"Testing Hidapi","text":"<p>If you are not sure if <code>hidapi</code> is installed correctly, you can test it with the console tool hidapitester. This tool provides a simple interface to test the communication with HID devices. On GitHub, you can find the source code and precompiled binaries for Windows, Linux, and Mac OS.</p> <p>Just download the binary for your system and run it in the terminal.</p> <p>List connected devices: <pre><code>./hidapitester --list\n</code></pre></p> My output <pre><code>046D/C626: 3Dconnexion - SpaceNavigator\n045E/07A5: Microsoft - Microsoft 2.4GHz Transceiver v9.0\n...\n</code></pre> <p>Read data from the device (replace <code>&lt;VID/PID&gt;</code> with the VID/PID of your device): <pre><code>./hidapitester --vidpid &lt;VID/PID&gt; --open --read-input\n</code></pre></p> My output <pre><code>./hidapitester --vidpid 046D/C626 --open --read-input\nOpening device, vid/pid: 0x046D/0xC626\nReading 64-byte input report 0, 250 msec timeout...read 7 bytes:\n01 76 00 00 00 FA FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\nClosing device\n</code></pre> <p>Read descriptor from the device (replace <code>&lt;VID/PID&gt;</code> with the VID/PID of your device): <pre><code>./hidapitester --vidpid &lt;VID/PID&gt; --open --get-report-descriptor\n</code></pre></p> My output <pre><code>./hidapitester --vidpid 046D/C626 --open --get-report-descriptor\nOpening device, vid/pid: 0x046D/0xC626\nReport Descriptor:\n05 01 09 08 A1 01 A1 00 85 01 16 A2 FE 26 5E 01 36 88 FA 46 78 05 55 0C 65 11 09 30 09 31 09 32\n75 10 95 03 81 06 C0 A1 00 85 02 09 33 09 34 09 35 75 10 95 03 81 06 C0 A1 02 85 03 05 01 05 09\n...\nClosing device\n</code></pre>"},{"location":"troubleshooting/#windows","title":"Windows","text":"<p>Error message - OSError: cannot load library 'hidapi.dll'</p> <pre><code>Traceback (most recent call last):\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\easyhid\\easyhid.py\", line 53, in &lt;module&gt;\n    hidapi = ffi.dlopen('hidapi.dll')\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\cffi\\api.py\", line 150, in dlopen\n    lib, function_cache = _make_ffi_library(self, name, flags)\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\cffi\\api.py\", line 832, in _make_ffi_library\n    backendlib = _load_backend_lib(backend, libname, flags)\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\cffi\\api.py\", line 827, in _load_backend_lib\n    raise OSError(msg)\nOSError: cannot load library 'hidapi.dll': error 0x7e.  Additionally, ctypes.util.find_library() did not manage to locate a library called 'hidapi.dll\n</code></pre> Other error message - OSError: dlopen(None) cannot work on Windows for Python 3 <pre><code>File \"C:\\Users\\Student\\Downloads\\basicExample.py\", line 1, in &lt;module&gt;\n    import pyspacemouse\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\pyspacemouse\\__init__.py\", line 1, in &lt;module&gt;\n    from .pyspacemouse import *\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\pyspacemouse\\pyspacemouse.py\", line 1, in &lt;module&gt;\n    from easyhid import Enumeration, HIDException\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\easyhid\\__init__.py\", line 8, in &lt;module&gt;\n    from easyhid.easyhid import *\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\easyhid\\easyhid.py\", line 55, in &lt;module&gt;\n    hidapi = ffi.dlopen(ctypes.util.find_library('hidapi.dll'))\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\cffi\\api.py\", line 150, in dlopen\n    lib, function_cache = _make_ffi_library(self, name, flags)\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\cffi\\api.py\", line 832, in _make_ffi_library\n    backendlib = _load_backend_lib(backend, libname, flags)\nFile \"C:\\Users\\Student\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.12_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python312\\site-packages\\cffi\\api.py\", line 821, in _load_backend_lib\n    raise OSError(\"dlopen(None) cannot work on Windows for Python 3 \"\nOSError: dlopen(None) cannot work on Windows for Python 3 (see http://bugs.python.org/issue23606)\n</code></pre> <p>If you are using Windows, you may encounter issues with the <code>hidapi</code> library. The library is not included in the system, so you have to install it manually.</p> <p>Go to hidapi GitHub and download the latest version of the library in zip format. Extract the zip file and copy the x64/x86 folder with <code>hidapi.dll</code> to the static location where will be found by the system.</p> <p>To make it work, you have to add the folder to the system <code>PATH</code> variable.</p> <p>Go to Windows settings and search for <code>enviroment</code>. </p> <p>Click on the <code>Environment variables</code>. </p> <p>Append the path to the folder with <code>hidapi.dll</code> to the <code>Path</code> variable. </p> <p>After this setup, you have to restart (maybe log out) your computer to apply the changes. Let's start using this library in your Python code.</p>"},{"location":"mouseApi/","title":"API documentation for this tool","text":"<p>Documentation for PySpaceMouse is generated by MkDoxy.</p>"},{"location":"mouseApi/#examples","title":"Examples","text":"<p>More examples can be found in Examples page.</p>"},{"location":"mouseApi/#module-pyspacemouse","title":"Module pyspacemouse","text":"<p>The module-level API is as follows:</p> <pre><code>open(callback=None, button_callback=None, button_callback_arr=None, set_nonblocking_loop=True, device=None)\n    Open a 3D space navigator device. Makes this device the current active device, which enables the module-level read() and close()\n    calls. For multiple devices, use the read() and close() calls on the returned object instead, and don't use the module-level calls.\n\n    Parameters:\n        callback: If callback is provided, it is called on each HID update with a copy of the current state namedtuple\n        dof_callback: If dof_callback is provided, it is called only on DOF state changes with the argument (state).\n        button_callback: If button_callback is provided, it is called on each button push, with the arguments (state_tuple, button_state)\n        device: name of device to open, as a string like \"SpaceNavigator\". Must be one of the values in `supported_devices`.\n                If `None`, chooses the first supported device found.\n    Returns:\n        Device object if the device was opened successfully\n        None if the device could not be opened\n\nread()              Return a namedtuple giving the current device state (t,x,y,z,roll,pitch,yaw,button)\nclose()             Close the connection to the current device, if it is open\nlist_devices()      Return a list of supported devices found, or an empty list if none found\n</code></pre> <p><code>open()</code> returns a DeviceSpec object. If you have multiple 3Dconnexion devices, you can use the object-oriented API to access them individually. Each object has the following API, which functions exactly as the above API, but on a per-device basis:</p> <pre><code>dev.open()          Opens the connection (this is always called by the module-level open command,\n                    so you should not need to use it unless you have called close())\ndev.read()          Return the state of the device as namedtuple [t,x,y,z,roll,pitch,yaw,button]\ndev.close()         Close this device\n</code></pre> <p>There are also attributes:</p> <pre><code>dev.connected       True if the device is connected, False otherwise\ndev.state           Convenience property which returns the same value as read()\n</code></pre>"},{"location":"mouseApi/#state-objects","title":"State objects","text":"<p>State objects returned from <code>read()</code> have 7 attributes: [t,x,y,z,roll,pitch,yaw,button].</p> <ul> <li>t: timestamp in seconds since the script started.</li> <li>x,y,z: translations in the range [-1.0, 1.0]</li> <li>roll, pitch, yaw: rotations in the range [-1.0, 1.0].</li> <li>button: list of button states (0 or 1), in order specified in the device specifier</li> </ul>"},{"location":"mouseApi/examples/","title":"Examples","text":""},{"location":"mouseApi/examples/#basic-usage","title":"Basic usage","text":"<p>basicExample.py <pre><code>import pyspacemouse\nimport time\n\nsuccess = pyspacemouse.open()\nif success:\n    while 1:\n        state = pyspacemouse.read()\n        print(state.x, state.y, state.z)\n        time.sleep(0.01)\n</code></pre></p>"},{"location":"mouseApi/examples/#usage-with-callback","title":"Usage with callback","text":"<p>callbackExample.py <pre><code>import pyspacemouse\nimport time\n\n\ndef button_0(state, buttons, pressed_buttons):\n    print(\"Button:\", pressed_buttons)\n\n\ndef button_0_1(state, buttons, pressed_buttons):\n    print(\"Buttons:\", pressed_buttons)\n\n\ndef someButton(state, buttons):\n    print(\"Some button\")\n\n\ndef callback():\n    button_arr = [pyspacemouse.ButtonCallback(0, button_0),\n                  pyspacemouse.ButtonCallback([1], lambda state, buttons, pressed_buttons: print(\"Button: 1\")),\n                  pyspacemouse.ButtonCallback([0, 1], button_0_1), ]\n\n    success = pyspacemouse.open(dof_callback=pyspacemouse.print_state, button_callback=someButton,\n                                button_callback_arr=button_arr)\n    if success:\n        while True:\n            pyspacemouse.read()\n            time.sleep(0.01)\n\n\nif __name__ == '__main__':\n    callback()\n</code></pre></p>"},{"location":"mouseApi/examples/#callback-print_state","title":"Callback: print_state","text":"<p>Print all axis states</p> <pre><code>x +0.00    y +0.00    z +0.00 roll +0.00 pitch +0.00  yaw +0.00    t +0.0\n</code></pre>"},{"location":"mouseApi/examples/#callback-print_buttons","title":"Callback: print_buttons","text":"<p>Print all buttons states</p> <pre><code>[ 0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0, ]\n</code></pre>"},{"location":"mouseApi/annotated/","title":"Class List","text":"<p>Here are the classes, structs, unions and interfaces with brief descriptions:</p> <ul> <li>namespace pyspacemouse <ul> <li>namespace pyspacemouse <ul> <li>class ButtonCallback </li> <li>class ButtonState </li> <li>class Config </li> <li>class DeviceSpec </li> <li>class DofCallback </li> </ul> </li> <li>namespace pyspacemouse_cli </li> </ul> </li> </ul>"},{"location":"mouseApi/files/","title":"File List","text":"<p>Here is a list of all files with brief descriptions:</p> <ul> <li>dir pyspacemouse <ul> <li>file __init__.py </li> <li>file pyspacemouse.py </li> <li>file pyspacemouse_cli.py </li> </ul> </li> </ul>"},{"location":"mouseApi/namespacepyspacemouse/","title":"Namespace pyspacemouse","text":"<p>Namespace List &gt; pyspacemouse</p>"},{"location":"mouseApi/namespacepyspacemouse/#namespaces","title":"Namespaces","text":"Type Name namespace pyspacemouse namespace pyspacemouse_cli <p>The documentation for this class was generated from the following file <code>pyspacemouse/__init__.py</code></p>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/","title":"Namespace pyspacemouse::pyspacemouse","text":"<p>Namespace List &gt; pyspacemouse &gt; pyspacemouse</p>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#classes","title":"Classes","text":"Type Name class ButtonCallback class ButtonState class Config class DeviceSpec class DofCallback"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#public-attributes","title":"Public Attributes","text":"Type Name AxisSpec   = =  namedtuple(\"AxisSpec\", [\"channel\", \"byte1\", \"byte2\", \"scale\"]) ButtonSpec   = =  namedtuple(\"ButtonSpec\", [\"channel\", \"byte\", \"bit\"]) SpaceNavigator   = =  namedtuple( \"SpaceNavigator\", [\"t\", \"x\", \"y\", \"z\", \"roll\", \"pitch\", \"yaw\", \"buttons\"] ) list button_callbacks_arr   = =  [ ButtonCallback([0], butt_0), ButtonCallback([1], lambda state, buttons, pressed_buttons: print(\"Button 1\")), ButtonCallback([2, 3], butt_2_3), ] Union[None, DeviceSpec] dev   = =  open(dof_callback=print_state, button_callback=print_buttons, button_callback_arr=button_callbacks_arr) dictionary device_specs high_acc_clock   = =  timeit.default_timer Union[None, DeviceSpec] state   = =  dev.read() supported_devices   = =  list(device_specs.keys())"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#public-functions","title":"Public Functions","text":"Type Name def butt_0 (state state, buttons buttons, pressed_buttons pressed_buttons)  def butt_2_3 (state state, buttons buttons, pressed_buttons pressed_buttons)  List[ButtonCallback] check_button_callback_arr (List button_callback_arr)  def check_config (callback callback=None, dof_callback dof_callback=None, dof_callback_arr dof_callback_arr=None, button_callback button_callback=None, button_callback_arr button_callback_arr=None)  List[DofCallback] check_dof_callback_arr (List dof_callback_arr)  def close ()  def config_remove ()  def config_set (Config config)  def config_set_sep (callback callback=None, dof_callback dof_callback=None, dof_callback_arr dof_callback_arr=None, button_callback button_callback=None, button_callback_arr button_callback_arr=None)  def list_all_hid_devices ()  def list_available_devices ()  def list_devices ()  Union[None, DeviceSpec] open (Callable callback, None] callback=None, Callable dof_callback_arr, None] dof_callback=None, List dof_callback_arr=None, Callable set_nonblocking_loop, None] button_callback=None, List button_callback_arr=None, set_nonblocking_loop DeviceNumber=True, str device=None, str path=None, DeviceNumber=0)  def openCfg (Config config, bool set_nonblocking_loop=True, device device=None, DeviceNumber DeviceNumber=0)  def print_buttons (state state, buttons buttons)  def print_state (state state)  def read ()  def silent_callback (state state)  def to_int16 (y1 y1, y2 y2) Simple HID code to read data from the 3dconnexion devices."},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-axisspec","title":"variable AxisSpec","text":"<pre><code>pyspacemouse::pyspacemouse.AxisSpec;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-buttonspec","title":"variable ButtonSpec","text":"<pre><code>pyspacemouse::pyspacemouse.ButtonSpec;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-spacenavigator","title":"variable SpaceNavigator","text":"<pre><code>pyspacemouse::pyspacemouse.SpaceNavigator;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-button_callbacks_arr","title":"variable button_callbacks_arr","text":"<pre><code>list pyspacemouse::pyspacemouse.button_callbacks_arr;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-dev","title":"variable dev","text":"<pre><code>Union[None, DeviceSpec] pyspacemouse::pyspacemouse.dev;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-device_specs","title":"variable device_specs","text":"<pre><code>dictionary pyspacemouse::pyspacemouse.device_specs;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-high_acc_clock","title":"variable high_acc_clock","text":"<pre><code>pyspacemouse::pyspacemouse.high_acc_clock;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-state","title":"variable state","text":"<pre><code>Union[None, DeviceSpec] pyspacemouse::pyspacemouse.state;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#variable-supported_devices","title":"variable supported_devices","text":"<pre><code>pyspacemouse::pyspacemouse.supported_devices;\n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-butt_0","title":"function butt_0","text":"<pre><code>def pyspacemouse::pyspacemouse::butt_0 (\n    state state,\n    buttons buttons,\n    pressed_buttons pressed_buttons\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-butt_2_3","title":"function butt_2_3","text":"<pre><code>def pyspacemouse::pyspacemouse::butt_2_3 (\n    state state,\n    buttons buttons,\n    pressed_buttons pressed_buttons\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-check_button_callback_arr","title":"function check_button_callback_arr","text":"<pre><code>List[ ButtonCallback ] pyspacemouse::pyspacemouse::check_button_callback_arr (\n    List button_callback_arr\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-check_config","title":"function check_config","text":"<pre><code>def pyspacemouse::pyspacemouse::check_config (\n    callback callback=None,\n    dof_callback dof_callback=None,\n    dof_callback_arr dof_callback_arr=None,\n    button_callback button_callback=None,\n    button_callback_arr button_callback_arr=None\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-check_dof_callback_arr","title":"function check_dof_callback_arr","text":"<pre><code>List[ DofCallback ] pyspacemouse::pyspacemouse::check_dof_callback_arr (\n    List dof_callback_arr\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-close","title":"function close","text":"<pre><code>def pyspacemouse::pyspacemouse::close () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-config_remove","title":"function config_remove","text":"<pre><code>def pyspacemouse::pyspacemouse::config_remove () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-config_set","title":"function config_set","text":"<pre><code>def pyspacemouse::pyspacemouse::config_set (\n    Config config\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-config_set_sep","title":"function config_set_sep","text":"<pre><code>def pyspacemouse::pyspacemouse::config_set_sep (\n    callback callback=None,\n    dof_callback dof_callback=None,\n    dof_callback_arr dof_callback_arr=None,\n    button_callback button_callback=None,\n    button_callback_arr button_callback_arr=None\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-list_all_hid_devices","title":"function list_all_hid_devices","text":"<pre><code>def pyspacemouse::pyspacemouse::list_all_hid_devices () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-list_available_devices","title":"function list_available_devices","text":"<pre><code>def pyspacemouse::pyspacemouse::list_available_devices () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-list_devices","title":"function list_devices","text":"<pre><code>def pyspacemouse::pyspacemouse::list_devices () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-open","title":"function open","text":"<pre><code>Union[None, DeviceSpec ] pyspacemouse::pyspacemouse::open (\n    Callable callback,\n    None] callback=None,\n    Callable dof_callback_arr,\n    None] dof_callback=None,\n    List dof_callback_arr=None,\n    Callable set_nonblocking_loop,\n    None] button_callback=None,\n    List button_callback_arr=None,\n    set_nonblocking_loop DeviceNumber=True,\n    str device=None,\n    str path=None,\n    DeviceNumber=0\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-opencfg","title":"function openCfg","text":"<pre><code>def pyspacemouse::pyspacemouse::openCfg (\n    Config config,\n    bool set_nonblocking_loop=True,\n    device device=None,\n    DeviceNumber DeviceNumber=0\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-print_buttons","title":"function print_buttons","text":"<pre><code>def pyspacemouse::pyspacemouse::print_buttons (\n    state state,\n    buttons buttons\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-print_state","title":"function print_state","text":"<pre><code>def pyspacemouse::pyspacemouse::print_state (\n    state state\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-read","title":"function read","text":"<pre><code>def pyspacemouse::pyspacemouse::read () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-silent_callback","title":"function silent_callback","text":"<pre><code>def pyspacemouse::pyspacemouse::silent_callback (\n    state state\n) \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse/#function-to_int16","title":"function to_int16","text":"<pre><code>def pyspacemouse::pyspacemouse::to_int16 (\n    y1 y1,\n    y2 y2\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/","title":"Class pyspacemouse::pyspacemouse::ButtonCallback","text":"<p>ClassList &gt; pyspacemouse &gt; pyspacemouse &gt; ButtonCallback</p> <p>More...</p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#public-attributes","title":"Public Attributes","text":"Type Name buttons callback"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Union] buttons, Callable callback, None] callback)"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#detailed-description","title":"Detailed Description","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#variable-buttons","title":"variable buttons","text":"<pre><code>pyspacemouse.pyspacemouse.ButtonCallback::buttons;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#variable-callback","title":"variable callback","text":"<pre><code>pyspacemouse.pyspacemouse.ButtonCallback::callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonCallback/#function-__init__","title":"function __init__","text":"<pre><code>def pyspacemouse::pyspacemouse::ButtonCallback::__init__ (\n    self self,\n    Union] buttons,\n    Callable callback,\n    None] callback\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonState/","title":"Class pyspacemouse::pyspacemouse::ButtonState","text":"<p>ClassList &gt; pyspacemouse &gt; pyspacemouse &gt; ButtonState</p> <p>Inherits the following classes: list</p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonState/#public-functions","title":"Public Functions","text":"Type Name def __int__ (self self)"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonState/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1ButtonState/#function-__int__","title":"function __int__","text":"<pre><code>def pyspacemouse::pyspacemouse::ButtonState::__int__ (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/","title":"Class pyspacemouse::pyspacemouse::Config","text":"<p>ClassList &gt; pyspacemouse &gt; pyspacemouse &gt; Config</p> <p>More...</p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#public-attributes","title":"Public Attributes","text":"Type Name button_callback button_callback_arr callback dof_callback dof_callback_arr"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, Callable callback, None] callback=None, Callable dof_callback_arr, None] dof_callback=None, List dof_callback_arr=None, Callable, None] button_callback=None, List button_callback_arr=None)"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#detailed-description","title":"Detailed Description","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#variable-button_callback","title":"variable button_callback","text":"<pre><code>pyspacemouse.pyspacemouse.Config::button_callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#variable-button_callback_arr","title":"variable button_callback_arr","text":"<pre><code>pyspacemouse.pyspacemouse.Config::button_callback_arr;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#variable-callback","title":"variable callback","text":"<pre><code>pyspacemouse.pyspacemouse.Config::callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#variable-dof_callback","title":"variable dof_callback","text":"<pre><code>pyspacemouse.pyspacemouse.Config::dof_callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#variable-dof_callback_arr","title":"variable dof_callback_arr","text":"<pre><code>pyspacemouse.pyspacemouse.Config::dof_callback_arr;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1Config/#function-__init__","title":"function __init__","text":"<pre><code>def pyspacemouse::pyspacemouse::Config::__init__ (\n    self self,\n    Callable callback,\n    None] callback=None,\n    Callable dof_callback_arr,\n    None] dof_callback=None,\n    List dof_callback_arr=None,\n    Callable,\n    None] button_callback=None,\n    List button_callback_arr=None\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/","title":"Class pyspacemouse::pyspacemouse::DeviceSpec","text":"<p>ClassList &gt; pyspacemouse &gt; pyspacemouse &gt; DeviceSpec</p> <p>More...</p> <p>Inherits the following classes: object</p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#public-attributes","title":"Public Attributes","text":"Type Name axis_scale button_callback button_callback_arr button_mapping callback device dict_state dict_state_last dof_callback dof_callback_arr hid_id led_id name product_name serial_number set_nonblocking_loop tuple_state vendor_name version_number"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, name name, hid_id hid_id, led_id led_id, mappings mappings, button_mapping button_mapping, axis_scale axis_scale=350.0)  def close (self self)  def config_remove (self self)  def config_set (self self, Config config)  def config_set_sep (self self, callback callback=None, dof_callback dof_callback=None, dof_callback_arr dof_callback_arr=None, button_callback button_callback=None, button_callback_arr button_callback_arr=None)  def connected (self self)  def describe_connection (self self)  def mappings (self self)  def mappings (self self, val val)  def open (self self)  def process (self self, data data)  def read (self self)  def state (self self)"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#detailed-description","title":"Detailed Description","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-axis_scale","title":"variable axis_scale","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::axis_scale;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-button_callback","title":"variable button_callback","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::button_callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-button_callback_arr","title":"variable button_callback_arr","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::button_callback_arr;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-button_mapping","title":"variable button_mapping","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::button_mapping;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-callback","title":"variable callback","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-device","title":"variable device","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::device;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-dict_state","title":"variable dict_state","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::dict_state;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-dict_state_last","title":"variable dict_state_last","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::dict_state_last;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-dof_callback","title":"variable dof_callback","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::dof_callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-dof_callback_arr","title":"variable dof_callback_arr","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::dof_callback_arr;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-hid_id","title":"variable hid_id","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::hid_id;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-led_id","title":"variable led_id","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::led_id;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-name","title":"variable name","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::name;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-product_name","title":"variable product_name","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::product_name;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-serial_number","title":"variable serial_number","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::serial_number;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-set_nonblocking_loop","title":"variable set_nonblocking_loop","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::set_nonblocking_loop;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-tuple_state","title":"variable tuple_state","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::tuple_state;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-vendor_name","title":"variable vendor_name","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::vendor_name;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#variable-version_number","title":"variable version_number","text":"<pre><code>pyspacemouse.pyspacemouse.DeviceSpec::version_number;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-__init__","title":"function __init__","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::__init__ (\n    self self,\n    name name,\n    hid_id hid_id,\n    led_id led_id,\n    mappings mappings,\n    button_mapping button_mapping,\n    axis_scale axis_scale=350.0\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-close","title":"function close","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::close (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-config_remove","title":"function config_remove","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::config_remove (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-config_set","title":"function config_set","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::config_set (\n    self self,\n    Config config\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-config_set_sep","title":"function config_set_sep","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::config_set_sep (\n    self self,\n    callback callback=None,\n    dof_callback dof_callback=None,\n    dof_callback_arr dof_callback_arr=None,\n    button_callback button_callback=None,\n    button_callback_arr button_callback_arr=None\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-connected","title":"function connected","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::connected (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-describe_connection","title":"function describe_connection","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::describe_connection (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-mappings-12","title":"function mappings [1/2]","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::mappings (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-mappings-22","title":"function mappings [2/2]","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::mappings (\n    self self,\n    val val\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-open","title":"function open","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::open (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-process","title":"function process","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::process (\n    self self,\n    data data\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-read","title":"function read","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::read (\n    self self\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DeviceSpec/#function-state","title":"function state","text":"<pre><code>def pyspacemouse::pyspacemouse::DeviceSpec::state (\n    self self\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/","title":"Class pyspacemouse::pyspacemouse::DofCallback","text":"<p>ClassList &gt; pyspacemouse &gt; pyspacemouse &gt; DofCallback</p> <p>More...</p>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#public-attributes","title":"Public Attributes","text":"Type Name axis callback callback_minus filter sleep"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#public-functions","title":"Public Functions","text":"Type Name def __init__ (self self, str axis, Callable callback, None] callback, float sleep=0.0, Callable filter, None] callback_minus=None, float filter=0.0)  def __init__ (self self, str axis, Callable callback, None] callback, float sleep=0.0, Callable filter, None] callback_minus=None, float filter=0.0)"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#detailed-description","title":"Detailed Description","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#public-attributes-documentation","title":"Public Attributes Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#variable-axis","title":"variable axis","text":"<pre><code>pyspacemouse.pyspacemouse.DofCallback::axis;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#variable-callback","title":"variable callback","text":"<pre><code>pyspacemouse.pyspacemouse.DofCallback::callback;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#variable-callback_minus","title":"variable callback_minus","text":"<pre><code>pyspacemouse.pyspacemouse.DofCallback::callback_minus;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#variable-filter","title":"variable filter","text":"<pre><code>pyspacemouse.pyspacemouse.DofCallback::filter;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#variable-sleep","title":"variable sleep","text":"<pre><code>pyspacemouse.pyspacemouse.DofCallback::sleep;\n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#function-__init__-12","title":"function __init__ [1/2]","text":"<pre><code>def pyspacemouse::pyspacemouse::DofCallback::__init__ (\n    self self,\n    str axis,\n    Callable callback,\n    None] callback,\n    float sleep=0.0,\n    Callable filter,\n    None] callback_minus=None,\n    float filter=0.0\n) \n</code></pre>"},{"location":"mouseApi/classpyspacemouse_1_1pyspacemouse_1_1DofCallback/#function-__init__-12_1","title":"function __init__ [1/2]","text":"<pre><code>def pyspacemouse::pyspacemouse::DofCallback::__init__ (\n    self self,\n    str axis,\n    Callable callback,\n    None] callback,\n    float sleep=0.0,\n    Callable filter,\n    None] callback_minus=None,\n    float filter=0.0\n) \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/","title":"Namespace pyspacemouse::pyspacemouse_cli","text":"<p>Namespace List &gt; pyspacemouse &gt; pyspacemouse_cli</p>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#public-functions","title":"Public Functions","text":"Type Name def list_all_hid_devices_cli ()  def list_spacemouse_cli ()  def list_supported_devices_cli ()  def main ()  def print_version_cli ()  def test_connect_cli ()"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#public-functions-documentation","title":"Public Functions Documentation","text":""},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#function-list_all_hid_devices_cli","title":"function list_all_hid_devices_cli","text":"<pre><code>def pyspacemouse::pyspacemouse_cli::list_all_hid_devices_cli () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#function-list_spacemouse_cli","title":"function list_spacemouse_cli","text":"<pre><code>def pyspacemouse::pyspacemouse_cli::list_spacemouse_cli () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#function-list_supported_devices_cli","title":"function list_supported_devices_cli","text":"<pre><code>def pyspacemouse::pyspacemouse_cli::list_supported_devices_cli () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#function-main","title":"function main","text":"<pre><code>def pyspacemouse::pyspacemouse_cli::main () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#function-print_version_cli","title":"function print_version_cli","text":"<pre><code>def pyspacemouse::pyspacemouse_cli::print_version_cli () \n</code></pre>"},{"location":"mouseApi/namespacepyspacemouse_1_1pyspacemouse__cli/#function-test_connect_cli","title":"function test_connect_cli","text":"<pre><code>def pyspacemouse::pyspacemouse_cli::test_connect_cli () \n</code></pre> <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse_cli.py</code></p>"},{"location":"mouseApi/dir_4d4c91c635597e458e70163b03149dfd/","title":"Dir pyspacemouse","text":"<p>FileList &gt; pyspacemouse</p>"},{"location":"mouseApi/dir_4d4c91c635597e458e70163b03149dfd/#files","title":"Files","text":"Type Name file __init__.py file pyspacemouse.py file pyspacemouse_cli.py <p>The documentation for this class was generated from the following file <code>pyspacemouse/</code></p>"},{"location":"mouseApi/____init_____8py/","title":"File __init__.py","text":"<p>FileList &gt; pyspacemouse &gt; __init__.py</p> <p>Go to the source code of this file</p>"},{"location":"mouseApi/____init_____8py/#namespaces","title":"Namespaces","text":"Type Name namespace pyspacemouse <p>The documentation for this class was generated from the following file <code>pyspacemouse/__init__.py</code></p>"},{"location":"mouseApi/____init_____8py_source/","title":"File __init__.py","text":"<p>File List &gt; pyspacemouse &gt; __init__.py</p> <p>Go to the documentation of this file</p> <pre><code>from .pyspacemouse import *\n</code></pre>"},{"location":"mouseApi/pyspacemouse_8py/","title":"File pyspacemouse.py","text":"<p>FileList &gt; pyspacemouse &gt; pyspacemouse.py</p> <p>Go to the source code of this file</p>"},{"location":"mouseApi/pyspacemouse_8py/#namespaces","title":"Namespaces","text":"Type Name namespace pyspacemouse"},{"location":"mouseApi/pyspacemouse_8py/#classes","title":"Classes","text":"Type Name class ButtonCallback class ButtonState class Config class DeviceSpec class DofCallback <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse.py</code></p>"},{"location":"mouseApi/pyspacemouse_8py_source/","title":"File pyspacemouse.py","text":"<p>File List &gt; pyspacemouse &gt; pyspacemouse.py</p> <p>Go to the documentation of this file</p> <pre><code>from easyhid import Enumeration, HIDException\nfrom collections import namedtuple\nimport timeit\nimport copy\nfrom typing import Callable, Union, List\n\n# current version number\n__version__ = \"1.0.3\"\n\n# clock for timing\nhigh_acc_clock = timeit.default_timer\n\n# axis mappings are specified as:\n# [channel, byte1, byte2, scale]; scale is usually just -1 or 1 and multiplies the result by this value\n# (but per-axis scaling can also be achieved by setting this value)\n# byte1 and byte2 are indices into the HID array indicating the two bytes to read to form the value for this axis\n# For the SpaceNavigator, these are consecutive bytes following the channel number.\nAxisSpec = namedtuple(\"AxisSpec\", [\"channel\", \"byte1\", \"byte2\", \"scale\"])\n\n# button states are specified as:\n# [channel, data byte,  bit of byte, index to write to]\n# If a message is received on the specified channel, the value of the data byte is set in the button bit array\nButtonSpec = namedtuple(\"ButtonSpec\", [\"channel\", \"byte\", \"bit\"])\n\n\n\n\n# convert two 8 bit bytes to a signed 16 bit integer\ndef to_int16(y1, y2):\n    x = (y1) | (y2 &lt;&lt; 8)\n    if x &gt;= 32768:\n        x = -(65536 - x)\n    return x\n\n\n# tuple for 6DOF results\nSpaceNavigator = namedtuple(\n    \"SpaceNavigator\", [\"t\", \"x\", \"y\", \"z\", \"roll\", \"pitch\", \"yaw\", \"buttons\"]\n)\n\n\nclass ButtonState(list):\n    def __int__(self):\n        return sum((b &lt;&lt; i) for (i, b) in enumerate(reversed(self)))\n\n\nclass ButtonCallback:\n    \"\"\"Register new button callback\"\"\"\n\n    def __init__(\n            self, buttons: Union[int, List[int]], callback: Callable[[int, int], None]\n    ):\n        self.buttonsbuttons = buttons\n        self.callbackcallback = callback\n\n\nclass DofCallback:\n    \"\"\"Register new DoF callback\"\"\"\n\n    def __init__(\n            self,\n            axis: str,\n            callback: Callable[[int], None],\n            sleep: float = 0.0,\n            callback_minus: Callable[[int], None] = None,\n            filter: float = 0.0\n    ):\n        self.axisaxis = axis\n        self.callbackcallback = callback\n        self.sleepsleep = sleep\n        self.callback_minuscallback_minus = callback_minus\n        self.filterfilter = filter\n\n\nclass Config:\n    \"\"\"Create new config file with correct structure and check that the configuration has correct parts\"\"\"\n\n    def __init__(\n            self,\n            callback: Callable[[object], None] = None,\n            dof_callback: Callable[[object], None] = None,\n            dof_callback_arr: List[DofCallback] = None,\n            button_callback: Callable[[object, list], None] = None,\n            button_callback_arr: List[ButtonCallback] = None,\n\n    ):\n        check_config(callback, dof_callback, dof_callback_arr, button_callback, button_callback_arr)\n        self.callbackcallback = callback\n        self.dof_callbackdof_callback = dof_callback\n        self.dof_callback_arrdof_callback_arr = dof_callback_arr\n        self.button_callbackbutton_callback = button_callback\n        self.button_callback_arrbutton_callback_arr = button_callback_arr\n\n\nclass DeviceSpec(object):\n    \"\"\"Holds the specification of a single 3Dconnexion device\"\"\"\n\n    def __init__(\n            self, name, hid_id, led_id, mappings, button_mapping, axis_scale=350.0\n    ):\n        self.namename = name\n        self.hid_idhid_id = hid_id\n        self.led_idled_id = led_id\n        self.__mappings__mappings = mappings\n        self.button_mappingbutton_mapping = button_mapping\n        self.axis_scaleaxis_scale = axis_scale\n        self.__bytes_to_read__bytes_to_read = self.__get_num_bytes_to_read__get_num_bytes_to_read()\n\n        # self.led_usage = hid.get_full_usage_id(led_id[0], led_id[1])\n        # initialise to a vector of 0s for each state\n        self.dict_statedict_state = {\n            \"t\": -1,\n            \"x\": 0,\n            \"y\": 0,\n            \"z\": 0,\n            \"roll\": 0,\n            \"pitch\": 0,\n            \"yaw\": 0,\n            \"buttons\": ButtonState([0] * len(self.button_mappingbutton_mapping)),\n        }\n        # initialise to a vector for button_callback_arr timer\n        self.dict_state_lastdict_state_last = {\n            \"x\": 0.0,\n            \"y\": 0.0,\n            \"z\": 0.0,\n            \"roll\": 0.0,\n            \"pitch\": 0.0,\n            \"yaw\": 0.0,\n        }\n        self.tuple_statetuple_state = SpaceNavigator(**self.dict_statedict_state)\n\n        # start in disconnected state\n        self.devicedevice = None\n        self.callbackcallback = None\n        self.dof_callbackdof_callback = None\n        self.dof_callback_arrdof_callback_arr = None\n        self.button_callbackbutton_callback = None\n        self.button_callback_arrbutton_callback_arr = None\n        self.set_nonblocking_loopset_nonblocking_loop = True\n\n    def __get_num_bytes_to_read(self):\n        byte_indices = []\n        for value in self.__mappings__mappings.values():\n            byte_indices.extend([value.byte1, value.byte2])\n\n        return max(byte_indices) + 1\n\n    def describe_connection(self):\n        \"\"\"Return string representation of the device, including\n        the connection state\"\"\"\n        if self.devicedevice is None:\n            return f\"{self.name} [disconnected]\"\n        else:\n            return f\"{self.name} connected to {self.vendor_name} {self.product_name} version: {self.version_number} [serial: {self.serial_number}]\"\n\n    @property\n    def mappings(self):\n        return self.__mappings__mappings\n\n    @mappings.setter\n    def mappings(self, val):\n        self.__mappings__mappings = val\n        self.__bytes_to_read__bytes_to_read = self.__get_num_bytes_to_read__get_num_bytes_to_read()\n\n    @property\n    def connected(self):\n        \"\"\"True if the device has been connected\"\"\"\n        return self.devicedevice is not None\n\n    @property\n    def state(self):\n        \"\"\"Return the current value of read()\n\n        Returns: state: {t,x,y,z,pitch,yaw,roll,button} namedtuple\n                None if the device is not open.\n        \"\"\"\n        return self.readread()\n\n    def open(self):\n        \"\"\"Open a connection to the device, if possible\"\"\"\n        if self.devicedevice:\n            try:\n                self.devicedevice.open()\n            except HIDException as e:\n                raise Exception(\"Failed to open device\") from e\n\n        # copy in product details\n        self.product_nameproduct_name = self.devicedevice.product_string\n        self.vendor_namevendor_name = self.devicedevice.manufacturer_string\n        self.version_numberversion_number = self.devicedevice.release_number\n        # doesn't seem to work on 3dconnexion devices...\n        # serial number will be a byte string, we convert to a hex id\n        self.serial_numberserial_number = \"\".join(\n            [\"%02X\" % ord(char) for char in self.devicedevice.serial_number]\n        )\n\n    # def set_led(self, state):\n    #     \"\"\"Set the LED state to state (True or False)\"\"\"\n    #     if self.connected:\n    #         reports = self.device.find_output_reports()\n    #         for report in reports:\n    #             if self.led_usage in report:\n    #                 report[self.led_usage] = state\n    #                 report.send()\n\n    def close(self):\n        \"\"\"Close the connection, if it is open\"\"\"\n        if self.connectedconnected:\n            self.devicedevice.close()\n            self.devicedevice = None\n\n    def read(self):\n        \"\"\"Read data from SpaceMouse and return the current state of this navigation controller.\n\n        Returns:\n            state: {t,x,y,z,pitch,yaw,roll,button} namedtuple\n            None if the device is not open.\n        \"\"\"\n        if not self.connectedconnected:\n            return None\n        # read bytes from SpaceMouse\n        ret = self.devicedevice.read(self.__bytes_to_read__bytes_to_read)\n        # test for nonblocking read\n        if (ret):\n            self.processprocess(ret)\n        return self.tuple_statetuple_state\n\n    def process(self, data):\n        \"\"\"\n        Update the state based on the incoming data\n\n        This function updates the state of the DeviceSpec object, giving values for each\n        axis [x,y,z,roll,pitch,yaw] in range [-1.0, 1.0]\n        The state tuple is only set when all 6 DoF have been read correctly.\n\n        The timestamp (in fractional seconds since the start of the program)  is written as element \"t\"\n\n        If callback is provided, it is called only on DoF state changes with a copy of the current state tuple.\n        If dof_callback is provided, it is called only on DOF state changes with the argument (state).\n        If dof_callback_arr is provided, it is called only on DOF state changes with the argument (state, axis).\n        If button_callback is provided, it is called only on button state changes with the argument (state, buttons).\n        If button_callbacks_arr is provided, it is called only on specific button state true with the argument (state, buttons, pressed_buttons).\n\n        Parameters:\n            data    The data for this HID event, as returned by the HID callback\n\n        \"\"\"\n        button_changed = False\n        dof_changed = False\n\n        for name, (chan, b1, b2, flip) in self.__mappings__mappings.items():\n            if data[0] == chan:\n                dof_changed = True\n                #check if b1 or b2 is over the length of the data\n                if b1 &lt; len(data) and b2 &lt; len(data):\n                    self.dict_statedict_state[name] = (\n                            flip * to_int16(data[b1], data[b2]) / float(self.axis_scaleaxis_scale)\n                    )\n\n        for button_index, (chan, byte, bit) in enumerate(self.button_mappingbutton_mapping):\n            if data[0] == chan:\n                button_changed = True\n                # update the button vector\n                mask = 1 &lt;&lt; bit\n                self.dict_statedict_state[\"buttons\"][button_index] = (\n                    1 if (data[byte] &amp; mask) != 0 else 0\n                )\n\n        self.dict_statedict_state[\"t\"] = high_acc_clock()\n\n        # must receive both parts of the 6DOF state before we return the state dictionary\n        if len(self.dict_statedict_state) == 8:\n            self.tuple_statetuple_state = SpaceNavigator(**self.dict_statedict_state)\n\n        # call any attached callbacks\n        if self.callbackcallback:\n            self.callbackcallback(self.tuple_statetuple_state)\n\n        # only call the DOF callback if the DOF state actually changed\n        if self.dof_callbackdof_callback and dof_changed:\n            self.dof_callbackdof_callback(self.tuple_statetuple_state)\n\n        # only call the DoF callback_arr if the specific DoF state actually changed\n        if self.dof_callback_arrdof_callback_arr and dof_changed:\n            # foreach all callbacks (ButtonCallback)\n            for block_dof_callback in self.dof_callback_arrdof_callback_arr:\n                now = high_acc_clock()\n                axis_name = block_dof_callback.axis\n                if now &gt;= self.dict_state_lastdict_state_last[axis_name] + block_dof_callback.sleep:\n                    axis_val = self.dict_statedict_state[axis_name]\n                    # is minus callback defined\n                    if block_dof_callback.callback_minus:\n                        # is axis value greater than filter\n                        if axis_val &gt; block_dof_callback.filter:\n                            block_dof_callback.callback(self.tuple_statetuple_state, axis_val)\n                        elif axis_val &lt; -block_dof_callback.filter:\n                            block_dof_callback.callback_minus(self.tuple_statetuple_state, axis_val)\n                    elif axis_val &gt; block_dof_callback.filter or axis_val &lt; -block_dof_callback.filter:\n                        block_dof_callback.cafllback(self.tuple_statetuple_state, axis_val)\n                    self.dict_state_lastdict_state_last[axis_name] = now\n\n        # only call the button callback if the button state actually changed\n        if self.button_callbackbutton_callback and button_changed:\n            self.button_callbackbutton_callback(self.tuple_statetuple_state, self.tuple_statetuple_state.buttons)\n\n        # only call the button callback_arr if the specific button state actually changed\n        if self.button_callback_arrbutton_callback_arr and button_changed:\n            # foreach all callbacks (ButtonCallback)\n            for block_button_callback in self.button_callback_arrbutton_callback_arr:\n                run = True\n                # are buttons list\n                if type(block_button_callback.buttons) is list:\n                    for button_id in block_button_callback.buttons:\n                        if not self.tuple_statetuple_state.buttons[button_id]:\n                            run = False\n\n                # is one button\n                elif isinstance(block_button_callback.buttons, int):\n                    if not self.tuple_statetuple_state.buttons[block_button_callback.buttons]:\n                        run = False\n                # call callback\n                if run:\n                    block_button_callback.callback(self.tuple_statetuple_state, self.tuple_statetuple_state.buttons,\n                                                   block_button_callback.buttons)\n\n    def config_set(self, config: Config):\n        \"\"\"Set new configuration of mouse from Config class\"\"\"\n\n        self.callbackcallback = config.callback\n        self.dof_callbackdof_callback = config.dof_callback\n        self.dof_callback_arrdof_callback_arr = config.dof_callback_arr\n        self.button_callbackbutton_callback = config.button_callback\n        self.button_callback_arrbutton_callback_arr = config.button_callback_arr\n\n    def config_set_sep(self, callback=None, dof_callback=None, dof_callback_arr=None, button_callback=None,\n                       button_callback_arr=None):\n        \"\"\"Set new configuration of mouse and check that the configuration has correct parts\"\"\"\n\n        check_config(callback, dof_callback, dof_callback_arr, button_callback, button_callback_arr)\n\n        self.callbackcallback = callback\n        self.dof_callbackdof_callback = dof_callback\n        self.dof_callback_arrdof_callback_arr = dof_callback_arr\n        self.button_callbackbutton_callback = button_callback\n        self.button_callback_arrbutton_callback_arr = button_callback_arr\n\n    def config_remove(self):\n        \"\"\"Remove old configuration\"\"\"\n\n        self.callbackcallback = None\n        self.dof_callbackdof_callback = None\n        self.dof_callback_arrdof_callback_arr = None\n        self.button_callbackbutton_callback = None\n        self.button_callback_arrbutton_callback_arr = None\n\n\n# the IDs for the supported devices\n# Each ID maps a device name to a DeviceSpec object\ndevice_specs = {\n     \"SpaceMouse Enterprise\": DeviceSpec(\n        name=\"SpaceMouse Enterprise\",\n        # vendor ID and product ID\n        hid_id=[0x256f, 0xc633],\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=1, byte1=7, byte2=8, scale=-1),\n            \"roll\": AxisSpec(channel=1, byte1=9, byte2=10, scale=-1),\n            \"yaw\": AxisSpec(channel=1, byte1=11, byte2=12, scale=1),\n        },\n        button_mapping=[\n\n            # ButtonSpec(channel=3, byte=5, bit=0),\n            # ButtonSpec(channel=3, byte=5, bit=1),\n            # ButtonSpec(channel=3, byte=5, bit=2),\n            # ButtonSpec(channel=3, byte=5, bit=3),\n            # ButtonSpec(channel=3, byte=5, bit=4),\n            # ButtonSpec(channel=3, byte=5, bit=5),\n            # ButtonSpec(channel=3, byte=5, bit=6),\n            # ButtonSpec(channel=3, byte=5, bit=7),\n\n            ButtonSpec(channel=3, byte=2, bit=4), # 1\n            ButtonSpec(channel=3, byte=2, bit=5), # 2\n            ButtonSpec(channel=3, byte=2, bit=6), # 3\n            ButtonSpec(channel=3, byte=2, bit=7), # 4\n\n            ButtonSpec(channel=3, byte=3, bit=0), # 5\n            ButtonSpec(channel=3, byte=3, bit=1), # 6\n            ButtonSpec(channel=3, byte=3, bit=2), # 7\n            ButtonSpec(channel=3, byte=3, bit=3), # 8\n            ButtonSpec(channel=3, byte=3, bit=4), # 9\n            ButtonSpec(channel=3, byte=3, bit=5), # 10\n\n            ButtonSpec(channel=3, byte=1, bit=0), # MENU\n            ButtonSpec(channel=3, byte=1, bit=1), # FIT\n            ButtonSpec(channel=3, byte=1, bit=2), # T IN SQUARE\n            ButtonSpec(channel=3, byte=1, bit=4), # R IN SQUARE\n            ButtonSpec(channel=3, byte=1, bit=5), # F IN SQUARE\n\n            ButtonSpec(channel=3, byte=2, bit=0), # SQUARE WITH ROTATING ARROWS\n            ButtonSpec(channel=3, byte=2, bit=2), # ISO1\n            ButtonSpec(channel=3, byte=3, bit=6), # ESC\n            ButtonSpec(channel=3, byte=3, bit=7), # ALT\n\n            ButtonSpec(channel=3, byte=4, bit=0), # SHIFT\n            ButtonSpec(channel=3, byte=4, bit=1), # CTRL\n            ButtonSpec(channel=3, byte=4, bit=2), # LOCK\n\n\n\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpaceExplorer\": DeviceSpec(\n        name=\"SpaceExplorer\",\n        # vendor ID and product ID\n        hid_id=[0x46D, 0xc627],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=2, bit=0),  # SHIFT\n            ButtonSpec(channel=3, byte=1, bit=6),  # ESC\n            ButtonSpec(channel=3, byte=2, bit=1),  # CTRL\n            ButtonSpec(channel=3, byte=1, bit=7),  # ALT\n            ButtonSpec(channel=3, byte=1, bit=0),  # 1\n            ButtonSpec(channel=3, byte=1, bit=1),  # 2\n            ButtonSpec(channel=3, byte=2, bit=3),  # PANEL\n            ButtonSpec(channel=3, byte=2, bit=2),  # FIT\n            ButtonSpec(channel=3, byte=2, bit=5),  # -\n            ButtonSpec(channel=3, byte=2, bit=4),  # +\n            ButtonSpec(channel=3, byte=1, bit=2),  # T\n            ButtonSpec(channel=3, byte=1, bit=3),  # L\n            ButtonSpec(channel=3, byte=1, bit=5),  # F\n            ButtonSpec(channel=3, byte=2, bit=6),  # 2D\n            ButtonSpec(channel=3, byte=1, bit=4),  # R\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpaceNavigator\": DeviceSpec(\n        name=\"SpaceNavigator\",\n        # vendor ID and product ID\n        hid_id=[0x46D, 0xC626],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # LEFT\n            ButtonSpec(channel=3, byte=1, bit=1),  # RIGHT\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpaceMouse USB\": DeviceSpec(\n        name=\"SpaceMouseUSB\",\n        # vendor ID and product ID\n        hid_id=[0x256f, 0xc641],\n        # LED HID usage code pair\n        led_id=None,\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=None, byte=None, bit=None),  # No buttons\n            ],\n        axis_scale=350.0,\n    ),\n    \"SpaceMouse Compact\": DeviceSpec(\n        name=\"SpaceMouse Compact\",\n        # vendor ID and product ID\n        hid_id=[0x256F, 0xC635],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # LEFT\n            ButtonSpec(channel=3, byte=1, bit=1),  # RIGHT\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpaceMouse Pro Wireless\": DeviceSpec(\n        name=\"SpaceMouse Pro Wireless\",\n        # vendor ID and product ID\n        hid_id=[0x256F, 0xC632],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=1, byte1=7, byte2=8, scale=-1),\n            \"roll\": AxisSpec(channel=1, byte1=9, byte2=10, scale=-1),\n            \"yaw\": AxisSpec(channel=1, byte1=11, byte2=12, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # MENU\n            ButtonSpec(channel=3, byte=3, bit=7),  # ALT\n            ButtonSpec(channel=3, byte=4, bit=1),  # CTRL\n            ButtonSpec(channel=3, byte=4, bit=0),  # SHIFT\n            ButtonSpec(channel=3, byte=3, bit=6),  # ESC\n            ButtonSpec(channel=3, byte=2, bit=4),  # 1\n            ButtonSpec(channel=3, byte=2, bit=5),  # 2\n            ButtonSpec(channel=3, byte=2, bit=6),  # 3\n            ButtonSpec(channel=3, byte=2, bit=7),  # 4\n            ButtonSpec(channel=3, byte=2, bit=0),  # ROLL CLOCKWISE\n            ButtonSpec(channel=3, byte=1, bit=2),  # TOP\n            ButtonSpec(channel=3, byte=4, bit=2),  # ROTATION\n            ButtonSpec(channel=3, byte=1, bit=5),  # FRONT\n            ButtonSpec(channel=3, byte=1, bit=4),  # REAR\n            ButtonSpec(channel=3, byte=1, bit=1),  # FIT\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpaceMouse Pro\": DeviceSpec(\n        name=\"SpaceMouse Pro\",\n        # vendor ID and product ID\n        hid_id=[0x46D, 0xC62b],\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # MENU\n            ButtonSpec(channel=3, byte=3, bit=7),  # ALT\n            ButtonSpec(channel=3, byte=4, bit=1),  # CTRL\n            ButtonSpec(channel=3, byte=4, bit=0),  # SHIFT\n            ButtonSpec(channel=3, byte=3, bit=6),  # ESC\n            ButtonSpec(channel=3, byte=2, bit=4),  # 1\n            ButtonSpec(channel=3, byte=2, bit=5),  # 2\n            ButtonSpec(channel=3, byte=2, bit=6),  # 3\n            ButtonSpec(channel=3, byte=2, bit=7),  # 4\n            ButtonSpec(channel=3, byte=2, bit=0),  # ROLL CLOCKWISE\n            ButtonSpec(channel=3, byte=1, bit=2),  # TOP\n            ButtonSpec(channel=3, byte=4, bit=2),  # ROTATION\n            ButtonSpec(channel=3, byte=1, bit=5),  # FRONT\n            ButtonSpec(channel=3, byte=1, bit=4),  # REAR\n            ButtonSpec(channel=3, byte=1, bit=1),  # FIT\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpaceMouse Wireless\": DeviceSpec(\n        name=\"SpaceMouse Wireless\",\n        # vendor ID and product ID\n        hid_id=[0x256F, 0xC62E],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=1, byte1=7, byte2=8, scale=-1),\n            \"roll\": AxisSpec(channel=1, byte1=9, byte2=10, scale=-1),\n            \"yaw\": AxisSpec(channel=1, byte1=11, byte2=12, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # LEFT\n            ButtonSpec(channel=3, byte=1, bit=1),  # RIGHT\n        ],  # FIT\n        axis_scale=350.0,\n    ),\n    \"SpaceMouse Wireless [NEW]\": DeviceSpec(\n        name=\"SpaceMouse Wireless [NEW]\",\n        # vendor ID and product ID\n        hid_id=[0x256F, 0xC63A],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=1, byte1=7, byte2=8, scale=-1),\n            \"roll\": AxisSpec(channel=1, byte1=9, byte2=10, scale=-1),\n            \"yaw\": AxisSpec(channel=1, byte1=11, byte2=12, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # LEFT\n            ButtonSpec(channel=3, byte=1, bit=1),  # RIGHT\n        ],  # FIT\n        axis_scale=350.0,\n    ),\n    \"3Dconnexion Universal Receiver\": DeviceSpec(\n        name=\"3Dconnexion Universal Receiver\",\n        # vendor ID and product ID\n        hid_id=[0x256F, 0xC652],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=1, byte1=7, byte2=8, scale=-1),\n            \"roll\": AxisSpec(channel=1, byte1=9, byte2=10, scale=-1),\n            \"yaw\": AxisSpec(channel=1, byte1=11, byte2=12, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0),  # MENU\n            ButtonSpec(channel=3, byte=3, bit=7),  # ALT\n            ButtonSpec(channel=3, byte=4, bit=1),  # CTRL\n            ButtonSpec(channel=3, byte=4, bit=0),  # SHIFT\n            ButtonSpec(channel=3, byte=3, bit=6),  # ESC\n            ButtonSpec(channel=3, byte=2, bit=4),  # 1\n            ButtonSpec(channel=3, byte=2, bit=5),  # 2\n            ButtonSpec(channel=3, byte=2, bit=6),  # 3\n            ButtonSpec(channel=3, byte=2, bit=7),  # 4\n            ButtonSpec(channel=3, byte=2, bit=0),  # ROLL CLOCKWISE\n            ButtonSpec(channel=3, byte=1, bit=2),  # TOP\n            ButtonSpec(channel=3, byte=4, bit=2),  # ROTATION\n            ButtonSpec(channel=3, byte=1, bit=5),  # FRONT\n            ButtonSpec(channel=3, byte=1, bit=4),  # REAR\n            ButtonSpec(channel=3, byte=1, bit=1),  # FIT\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpacePilot\": DeviceSpec(\n        name=\"SpacePilot\",\n        # vendor ID and product ID\n        hid_id=[0x46D, 0xC625],\n        # LED HID usage code pair\n        led_id=None,\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=1, bit=0), # 1\n            ButtonSpec(channel=3, byte=1, bit=1), # 2\n            ButtonSpec(channel=3, byte=1, bit=2), # 3\n            ButtonSpec(channel=3, byte=1, bit=3), # 4\n            ButtonSpec(channel=3, byte=1, bit=4), # 5\n            ButtonSpec(channel=3, byte=1, bit=5), # 6\n            ButtonSpec(channel=3, byte=1, bit=6), # T\n            ButtonSpec(channel=3, byte=1, bit=7), # L\n            ButtonSpec(channel=3, byte=2, bit=0), # R\n            ButtonSpec(channel=3, byte=2, bit=1), # F\n            ButtonSpec(channel=3, byte=2, bit=2), # Esc\n            ButtonSpec(channel=3, byte=2, bit=3), # Alt\n            ButtonSpec(channel=3, byte=2, bit=4), # Shift\n            ButtonSpec(channel=3, byte=2, bit=5), # Ctrl\n            ButtonSpec(channel=3, byte=2, bit=6), # Fit\n            ButtonSpec(channel=3, byte=2, bit=7), # Panel\n            ButtonSpec(channel=3, byte=3, bit=0), # Zoom -\n            ButtonSpec(channel=3, byte=3, bit=1), # Zoom +\n            ButtonSpec(channel=3, byte=3, bit=2), # Dom\n            ButtonSpec(channel=3, byte=3, bit=3), # 3D Lock\n            ButtonSpec(channel=3, byte=3, bit=4), # Config\n        ],\n        axis_scale=350.0,\n    ),\n    \"SpacePilot Pro\": DeviceSpec(\n        name=\"SpacePilot Pro\",\n        # vendor ID and product ID\n        hid_id=[0x46D, 0xC629],\n        # LED HID usage code pair\n        led_id=[0x8, 0x4B],\n        mappings={\n            \"x\": AxisSpec(channel=1, byte1=1, byte2=2, scale=1),\n            \"y\": AxisSpec(channel=1, byte1=3, byte2=4, scale=-1),\n            \"z\": AxisSpec(channel=1, byte1=5, byte2=6, scale=-1),\n            \"pitch\": AxisSpec(channel=2, byte1=1, byte2=2, scale=-1),\n            \"roll\": AxisSpec(channel=2, byte1=3, byte2=4, scale=-1),\n            \"yaw\": AxisSpec(channel=2, byte1=5, byte2=6, scale=1),\n        },\n        button_mapping=[\n            ButtonSpec(channel=3, byte=4, bit=0),  # SHIFT\n            ButtonSpec(channel=3, byte=3, bit=6),  # ESC\n            ButtonSpec(channel=3, byte=4, bit=1),  # CTRL\n            ButtonSpec(channel=3, byte=3, bit=7),  # ALT\n            ButtonSpec(channel=3, byte=3, bit=1),  # 1\n            ButtonSpec(channel=3, byte=3, bit=2),  # 2\n            ButtonSpec(channel=3, byte=2, bit=6),  # 3\n            ButtonSpec(channel=3, byte=2, bit=7),  # 4\n            ButtonSpec(channel=3, byte=3, bit=0),  # 5\n            ButtonSpec(channel=3, byte=1, bit=0),  # MENU\n            ButtonSpec(channel=3, byte=4, bit=6),  # -\n            ButtonSpec(channel=3, byte=4, bit=5),  # +\n            ButtonSpec(channel=3, byte=4, bit=4),  # DOMINANT\n            ButtonSpec(channel=3, byte=4, bit=3),  # PAN/ZOOM\n            ButtonSpec(channel=3, byte=4, bit=2),  # ROTATION\n            ButtonSpec(channel=3, byte=2, bit=0),  # ROLL CLOCKWISE\n            ButtonSpec(channel=3, byte=1, bit=2),  # TOP\n            ButtonSpec(channel=3, byte=1, bit=5),  # FRONT\n            ButtonSpec(channel=3, byte=1, bit=4),  # REAR\n            ButtonSpec(channel=3, byte=2, bit=2),  # ISO\n            ButtonSpec(channel=3, byte=1, bit=1),  # FIT\n        ],\n        axis_scale=350.0,\n    ),\n}\n\n# [For the SpaceNavigator]\n# The HID data is in the format\n# [id, a, b, c, d, e, f]\n# each pair (a,b), (c,d), (e,f) is a 16 bit signed value representing the absolute device state [from -350 to 350]\n\n# if id==1, then the mapping is\n# (a,b) = y translation\n# (c,d) = x translation\n# (e,f) = z translation\n\n# if id==2 then the mapping is\n# (a,b) = x tilting (roll)\n# (c,d) = y tilting (pitch)\n# (d,e) = z tilting (yaw)\n\n# if id==3 then the mapping is\n# a = button. Bit 1 = button 1, bit 2 = button 2\n\n# Each movement of the device always causes two HID events, one\n# with id 1 and one with id 2, to be generated, one after the other.\n\n\nsupported_devices = list(device_specs.keys())\n_active_device = None\n\n\ndef close():\n    \"\"\"Close the active device, if it exists\"\"\"\n    if _active_device is not None:\n        _active_device.close()\n\n\ndef read():\n    \"\"\"Return the current state of the active navigation controller.\n\n    Returns:\n        state: {t,x,y,z,pitch,yaw,roll,button} namedtuple\n        None if the device is not open.\n    \"\"\"\n    return _active_device.read() if _active_device is not None else None\n\n\ndef list_devices():\n    \"\"\"Return a list of the supported devices connected\n\n    Returns:\n        A list of string names of the devices supported which were found. Empty if no supported devices found\n    \"\"\"\n    devices = []\n    try:\n        hid = Enumeration()\n    except AttributeError as e:\n        raise Exception(\n            \"HID API is probably not installed. \"\n            \"Look at https://spacemouse.kubaandrysek.cz for details.\"\n        ) from e\n\n    all_hids = hid.find()\n\n    if all_hids:\n        for device in all_hids:\n            devices.extend(\n                device_name\n                for device_name, spec in device_specs.items()\n                if (\n                    device.vendor_id == spec.hid_id[0]\n                    and device.product_id == spec.hid_id[1]\n                )\n            )\n    return devices\n\ndef list_available_devices():\n    \"\"\"Return a list of all supported devices from config\n\n    Returns:\n        A list of string names of the devices supported (device_name, vid_id, pid_id)\n    \"\"\"\n    return [\n        (device_name, spec.hid_id[0], spec.hid_id[1])\n        for device_name, spec in device_specs.items()\n    ]\n\ndef list_all_hid_devices():\n    \"\"\"Return a list of all HID devices connected\n\n    Returns:\n        A list of HID devices (product_string, manufacturer_string, vendor_id, product_id)\n    \"\"\"\n    try:\n        hid = Enumeration()\n    except AttributeError as e:\n        raise Exception(\n            \"HID API is probably not installed.\"\n            \"Look at https://spacemouse.kubaandrysek.cz for details.\"\n        ) from e\n\n    return [\n        (device.product_string, device.manufacturer_string, device.vendor_id, device.product_id)\n        for device in hid.find()\n    ]\n\ndef openCfg(config: Config, set_nonblocking_loop: bool = True, device=None, DeviceNumber=0):\n    \"\"\"\n    Open a 3D space navigator device. Same as open() but input one config file -&gt; class Config\n\n    Returns:\n        Device object if the device was opened successfully\n        None if the device could not be opened\n    \"\"\"\n\n    return open(config.callback, config.dof_callback, config.dof_callback_arr, config.button_callback,\n                config.button_callback_arr, set_nonblocking_loop, device, DeviceNumber)\n\n\ndef open(\n        callback: Callable[[object], None] = None,\n        dof_callback: Callable[[object], None] = None,\n        dof_callback_arr: List[DofCallback] = None,\n        button_callback: Callable[[object, list], None] = None,\n        button_callback_arr: List[ButtonCallback] = None,\n        set_nonblocking_loop=True,\n        device: str = None,\n        path: str = None,\n        DeviceNumber=0) -&gt; Union[None, DeviceSpec]:\n    \"\"\"\n    Open a 3D space navigator device. Makes this device the current active device, which enables the module-level read() and close()\n    calls. For multiple devices, use the read() and close() calls on the returned object instead, and don't use the module-level calls.\n\n    Parameters:\n        callback: If callback is provided, it is called only on DoF state changes with a copy of the current state tuple.\n        dof_callback: If dof_callback is provided, it is called only on DOF state changes with the argument (state).\n        dof_callback_arr: If dof_callback_arr is provided, it is called only on DOF state changes with the argument (state, axis).\n        button_callback: If button_callback is provided, it is called only on button state changes with the argument (state, buttons).\n        button_callback_arr: If button_callbacks_arr is provided, it is called only on specific button state true with the argument (state, buttons, pressed_buttons).\n        set_nonblocking_loop: Disable waiting for input from SpaceMouse. It is required for using callbacks\n        device: name of device to open. Must be one of the values in supported_devices. If None, chooses the first supported device found.\n        path: path of the device to open. If path is specified it will try to open at that path regardless of what is connected to it\n        DeviceNumber: use the first (DeviceNumber=0) device you find. (for universal wireless receiver)\n    Returns:\n        Device object if the device was opened successfully\n        None if the device could not be opened\n    \"\"\"\n    # only used if the module-level functions are used\n    global _active_device\n\n    # if no device name specified, look for any matching device and choose the first\n    if device is None:\n        all_devices = list_devices()\n        if len(all_devices) &gt; 0:\n            device = all_devices[0]\n        else:\n            raise Exception(\"No found any connected or supported devices.\")\n\n    found_devices = []\n    hid = Enumeration()\n    all_hids = hid.find()\n    if all_hids:\n        for dev in all_hids:\n            if path:\n                dev.path = path\n            spec = device_specs[device]\n            if dev.vendor_id == spec.hid_id[0] and dev.product_id == spec.hid_id[1]:\n                found_devices.append({\"Spec\": spec, \"HIDDevice\": dev})\n                print(f\"{device} found\")\n\n    else:\n        print(\"No HID devices detected\")\n        return None\n\n    if not found_devices:\n        print(\"No supported devices found\")\n        return None\n    else:\n        if len(found_devices) &lt;= DeviceNumber:\n            DeviceNumber = 0\n\n        if len(found_devices) &gt; DeviceNumber:\n            # Check that the input configuration has the correct components\n            # Raise an exception if it encounters incorrect component.\n            check_config(callback, dof_callback, dof_callback_arr, button_callback, button_callback_arr)\n            # create a copy of the device specification\n            spec = found_devices[DeviceNumber][\"Spec\"]\n            dev = found_devices[DeviceNumber][\"HIDDevice\"]\n            new_device = copy.deepcopy(spec)\n            new_device.device = dev\n\n            # set the callbacks\n            new_device.callback = callback\n            new_device.dof_callback = dof_callback\n            new_device.dof_callback_arr = dof_callback_arr\n            new_device.button_callback = button_callback\n            new_device.button_callback_arr = button_callback_arr\n            # open the device\n            new_device.open()\n            # set nonblocking/blocking mode\n            new_device.set_nonblocking_loop = set_nonblocking_loop\n            dev.set_nonblocking(set_nonblocking_loop)\n\n            _active_device = new_device\n            return new_device\n\n    print(\"Unknown error occured.\")\n    return None\n\n\ndef check_config(callback=None, dof_callback=None, dof_callback_arr=None, button_callback=None,\n                 button_callback_arr=None):\n    \"\"\"Check that the input configuration has the correct components.\n    Raise an exception if it encounters incorrect component.\n    \"\"\"\n    if dof_callback_arr and check_dof_callback_arr(dof_callback_arr):\n        pass\n    if button_callback_arr and check_button_callback_arr(button_callback_arr):\n        pass\n\n\ndef check_button_callback_arr(button_callback_arr: List[ButtonCallback]) -&gt; List[ButtonCallback]:\n    \"\"\"Check that the button_callback_arr has the correct components.\n    Raise an exception if it encounters incorrect component.\n    \"\"\"\n\n    # foreach ButtonCallback\n    for num, butt_call in enumerate(button_callback_arr):\n        if not isinstance(butt_call, ButtonCallback):\n            raise Exception(f\"'ButtonCallback[{num}]' is not instance of 'ButtonCallback'\")\n        if type(butt_call.buttons) is int:\n            pass\n        elif type(butt_call.buttons) is list:\n            for xnum, butt in enumerate(butt_call.buttons):\n                if type(butt) is not int:\n                    raise Exception(f\"'ButtonCallback[{num}]:buttons[{xnum}]' is not type int or list of int\")\n        else:\n            raise Exception(f\"'ButtonCallback[{num}]:buttons' is not type int or list of int\")\n        if not callable(butt_call.callback):\n            raise Exception(f\"'ButtonCallback[{num}]:callback' is not callable\")\n    return button_callback_arr\n\nclass DofCallback:\n    \"\"\"Register new DoF callback\"\"\"\n\n    def __init__(\n            self,\n            axis: str,\n            callback: Callable[[int], None],\n            sleep: float = 0.0,\n            callback_minus: Callable[[int], None] = None,\n            filter: float = 0.0\n    ):\n        self.axis = axis\n        self.callbackcallback = callback\n        self.sleep = sleep\n        self.callback_minus = callback_minus\n        self.filter = filter\n\ndef check_dof_callback_arr(dof_callback_arr: List[DofCallback]) -&gt; List[DofCallback]:\n    \"\"\"Check that the dof_callback_arr has the correct components.\n    Raise an exception if it encounters incorrect component.\"\"\"\n\n    # foreach DofCallback\n    for num, dof_call in enumerate(dof_callback_arr):\n        if not isinstance(dof_call, DofCallback):\n            raise Exception(f\"'DofCallback[{num}]' is not instance of 'DofCallback'\")\n            # has the correct axis name\n        if dof_call.axis not in [\"x\", \"y\", \"z\", \"roll\", \"pitch\", \"yaw\"]:\n            raise Exception(\n                f\"'DofCallback[{num}]:axis' is not string from ['x', 'y', 'z', 'roll', 'pitch', 'yaw']\")\n\n            # is callback callable\n        if not callable(dof_call.callback):\n            raise Exception(f\"'DofCallback[{num}]:callback' is not callable\")\n\n            # is sleep type float\n        if type(dof_call.sleep) is not float:\n            raise Exception(f\"'DofCallback[{num}]:sleep' is not type float\")\n\n            # is callback_minus callable\n        if not dof_call.callback_minus or not callable(\n            dof_call.callback_minus\n        ):\n            raise Exception(f\"'DofCallback[{num}]:callback_minus' is not callable\")\n\n            # is filter type float\n        if not dof_call.filter or type(dof_call.filter) is not float:\n            raise Exception(f\"'DofCallback[{num}]:filter' is not type float\")\n    return dof_callback_arr\n\n\ndef config_set(config: Config):\n    \"\"\"Set new configuration of mouse from Config class\"\"\"\n\n    if _active_device is not None:\n        _active_device.config_set(config)\n\n\ndef config_set_sep(callback=None, dof_callback=None, dof_callback_arr=None, button_callback=None,\n                   button_callback_arr=None):\n    \"\"\"Set new configuration of mouse and check that the configuration has correct parts\"\"\"\n\n    if _active_device is not None:\n        _active_device.config_set_sep(callback, dof_callback, dof_callback_arr, button_callback, button_callback_arr)\n\n\ndef config_remove():\n    \"\"\"Remove old configuration\"\"\"\n\n    if _active_device is not None:\n        _active_device.config_remove()\n\n\ndef print_state(state):\n    \"\"\"Simple default DoF callback\n    Print all axis to output\n    \"\"\"\n    if state:\n        print(\n            \" \".join(\n                [\n                    \"%4s %+.2f\" % (k, getattr(state, k))\n                    for k in [\"x\", \"y\", \"z\", \"roll\", \"pitch\", \"yaw\", \"t\"]\n                ]\n            )\n        )\n\ndef silent_callback(state):\n    \"\"\"Silent callback\n    Does nothing\n    \"\"\"\n    pass\n\ndef print_buttons(state, buttons):\n    \"\"\"Simple default button callback\n    Print all buttons to output\n    \"\"\"\n    # simple default button callback\n    print(\n        (\n            (\n                \"[\"\n                + \" \".join([\"%2d, \" % buttons[k] for k in range(len(buttons))])\n            )\n            + \"]\"\n        )\n    )\n\n\n# def toggle_led(state, buttons):\n#     print(\"\".join([\"buttons=\", str(buttons)]))\n#     # Switch on the led on left push, off on right push\n#     if buttons[0] == 1:\n#         set_led(1)\n#     if buttons[1] == 1:\n#         set_led(0)\n#\n#\n# def set_led(state):\n#     if _active_device:\n#         _active_device.set_led(state)\n\n\nif __name__ == \"__main__\":\n\n    def butt_0(state, buttons, pressed_buttons):\n        print(\"Button 0\")\n\n\n    def butt_2_3(state, buttons, pressed_buttons):\n        print(\"Button 2 and 3\")\n\n\n    button_callbacks_arr = [\n        ButtonCallback([0], butt_0),\n        ButtonCallback([1], lambda state, buttons, pressed_buttons: print(\"Button 1\")),\n        ButtonCallback([2, 3], butt_2_3),\n    ]\n\n    dev = open(dof_callback=print_state, button_callback=print_buttons, button_callback_arr=button_callbacks_arr)\n\n    while True:\n        state = dev.read()\n</code></pre>"},{"location":"mouseApi/pyspacemouse__cli_8py/","title":"File pyspacemouse_cli.py","text":"<p>FileList &gt; pyspacemouse &gt; pyspacemouse_cli.py</p> <p>Go to the source code of this file</p>"},{"location":"mouseApi/pyspacemouse__cli_8py/#namespaces","title":"Namespaces","text":"Type Name namespace pyspacemouse_cli <p>The documentation for this class was generated from the following file <code>pyspacemouse/pyspacemouse_cli.py</code></p>"},{"location":"mouseApi/pyspacemouse__cli_8py_source/","title":"File pyspacemouse_cli.py","text":"<p>File List &gt; pyspacemouse &gt; pyspacemouse_cli.py</p> <p>Go to the documentation of this file</p> <pre><code>import argparse\nimport time\n\nfrom pyspacemouse import list_devices, list_available_devices, open as open_mouse, read as read_mouse, \\\n    close as close_mouse, list_all_hid_devices\nfrom pkg_resources import get_distribution\n\n\ndef print_version_cli():\n    distribution = get_distribution(\"pyspacemouse\")\n    print(f\"pyspacemouse version {distribution.version}\")\n\n\ndef list_spacemouse_cli():\n    devices = list_devices()\n    if devices:\n        print(\"Connected SpaceMouse devices:\")\n        for device in devices:\n            print(f\"- {device}\")\n    else:\n        print(\"Error: No connected SpaceMouse devices found.\")\n\ndef list_all_hid_devices_cli():\n    devices = list_all_hid_devices()\n    if devices:\n        print(\"All HID devices:\")\n        for (product_string, manufacturer_string, vendor_id, product_id) in devices:\n            if product_string == \"\":\n                product_string = \"Unknown\"\n            if manufacturer_string == \"\":\n                manufacturer_string = \"Unknown\"\n            print(f\"- {product_string} by {manufacturer_string} [VID: {hex(vendor_id)}, PID: {hex(product_id)}]\")\n    else:\n        print(\"Error: No HID devices found.\")\n\ndef list_supported_devices_cli():\n    available_devices = list_available_devices()\n    if available_devices:\n        print(\"Available SpaceMouse devices:\")\n        for (device_name, vid_id, pid_id) in available_devices:\n            print(f\"- {device_name} [VID: {hex(vid_id)}, PID: {hex(pid_id)}]\")\n    else:\n        print(\"Error: No available SpaceMouse devices found.\")\n\ndef test_connect_cli():\n    try:\n        success = open_mouse()\n    except Exception as e:\n        print(f\"Failed to open SpaceMouse: {e}\")\n        return\n\n    if not success:\n        print(\"Failed to open SpaceMouse\")\n        return\n\n    print(\"SpaceMouse opened successfully, reading x, y, z values...\")\n    time.sleep(1)\n\n    try:\n        while True:\n            state = read_mouse()\n            print(state.x, state.y, state.z)\n            time.sleep(0.01)\n    except KeyboardInterrupt:\n        print(\"KeyboardInterrupt: Exiting...\")\n    finally:\n        close_mouse()\n\ndef main():\n    parser = argparse.ArgumentParser(description=\"PySpaceMouse CLI\",\n                                     epilog=\"For more information, visit https://spacemouse.kubaandrysek.cz/\")\n    parser.add_argument(\n        \"--version\", action=\"store_true\", help=\"Version of pyspacemouse\"\n    )\n    parser.add_argument(\n        \"--list-spacemouse\", action=\"store_true\", help=\"List connected SpaceMouse devices\"\n    )\n    parser.add_argument(\n        \"--list-supported-devices\", action=\"store_true\", help=\"List supported SpaceMouse devices\"\n    )\n    parser.add_argument(\n        \"--list-all-hid-devices\", action=\"store_true\", help=\"List all connected HID devices\"\n    )\n    parser.add_argument(\n        \"--test-connect\", action=\"store_true\", help=\"Test connect to the first available device\"\n    )\n    args = parser.parse_args()\n\n    if args.version:\n        print_version_cli()\n    elif args.list_spacemouse:\n        list_spacemouse_cli()\n    elif args.list_supported_devices:\n        list_supported_devices_cli()\n    elif args.list_all_hid_devices:\n        list_all_hid_devices_cli()\n    elif args.test_connect:\n        test_connect_cli()\n    else:\n        parser.print_help()\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"mouseApi/namespaces/","title":"Namespace List","text":"<p>Here is a list of all namespaces with brief descriptions:</p> <ul> <li>namespace pyspacemouse <ul> <li>namespace pyspacemouse </li> <li>namespace pyspacemouse_cli </li> </ul> </li> </ul>"},{"location":"mouseApi/classes/","title":"Class Index","text":""},{"location":"mouseApi/classes/#b","title":"b","text":"<ul> <li>ButtonCallback (pyspacemouse::pyspacemouse)</li> <li>ButtonState (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/classes/#c","title":"c","text":"<ul> <li>Config (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/classes/#d","title":"d","text":"<ul> <li>DeviceSpec (pyspacemouse::pyspacemouse)</li> <li>DofCallback (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/hierarchy/","title":"Class Hierarchy","text":"<p>This inheritance list is sorted roughly, but not completely, alphabetically:</p> <ul> <li>class pyspacemouse::pyspacemouse::ButtonCallback </li> <li>class pyspacemouse::pyspacemouse::Config </li> <li>class pyspacemouse::pyspacemouse::DofCallback </li> <li>class list <ul> <li>class pyspacemouse::pyspacemouse::ButtonState </li> </ul> </li> <li>class object <ul> <li>class pyspacemouse::pyspacemouse::DeviceSpec </li> </ul> </li> </ul>"},{"location":"mouseApi/modules/","title":"Modules","text":"<p>No modules found.</p>"},{"location":"mouseApi/pages/","title":"Related Pages","text":"<p>Here is a list of all related documentation pages:</p>"},{"location":"mouseApi/class_members/","title":"Class Members","text":""},{"location":"mouseApi/class_members/#a","title":"a","text":"<ul> <li>axis_scale (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>axis (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_members/#b","title":"b","text":"<ul> <li>buttons (pyspacemouse::pyspacemouse::ButtonCallback)</li> <li>button_callback (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>button_callback_arr (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>button_mapping (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#c","title":"c","text":"<ul> <li>callback (pyspacemouse::pyspacemouse::ButtonCallback, pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec, pyspacemouse::pyspacemouse::DofCallback)</li> <li>close (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>config_remove (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>config_set (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>config_set_sep (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>connected (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>callback_minus (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_members/#d","title":"d","text":"<ul> <li>dof_callback (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>dof_callback_arr (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>describe_connection (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>device (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>dict_state (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>dict_state_last (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#f","title":"f","text":"<ul> <li>filter (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_members/#h","title":"h","text":"<ul> <li>hid_id (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#l","title":"l","text":"<ul> <li>led_id (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#m","title":"m","text":"<ul> <li>mappings (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#n","title":"n","text":"<ul> <li>name (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#o","title":"o","text":"<ul> <li>open (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#p","title":"p","text":"<ul> <li>process (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>product_name (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#r","title":"r","text":"<ul> <li>read (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#s","title":"s","text":"<ul> <li>serial_number (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>set_nonblocking_loop (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>state (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>sleep (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_members/#t","title":"t","text":"<ul> <li>tuple_state (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#v","title":"v","text":"<ul> <li>vendor_name (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>version_number (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_members/#_","title":"_","text":"<ul> <li>__init__ (pyspacemouse::pyspacemouse::ButtonCallback, pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec, pyspacemouse::pyspacemouse::DofCallback)</li> <li>__int__ (pyspacemouse::pyspacemouse::ButtonState)</li> <li>__bytes_to_read (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>__get_num_bytes_to_read (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>__mappings (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/","title":"Class Member Functions","text":""},{"location":"mouseApi/class_member_functions/#c","title":"c","text":"<ul> <li>close (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>config_remove (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>config_set (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>config_set_sep (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>connected (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#d","title":"d","text":"<ul> <li>describe_connection (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#m","title":"m","text":"<ul> <li>mappings (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#o","title":"o","text":"<ul> <li>open (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#p","title":"p","text":"<ul> <li>process (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#r","title":"r","text":"<ul> <li>read (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#s","title":"s","text":"<ul> <li>state (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_functions/#_","title":"_","text":"<ul> <li>__init__ (pyspacemouse::pyspacemouse::ButtonCallback, pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec, pyspacemouse::pyspacemouse::DofCallback)</li> <li>__int__ (pyspacemouse::pyspacemouse::ButtonState)</li> <li>__get_num_bytes_to_read (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/","title":"Class Member Variables","text":""},{"location":"mouseApi/class_member_variables/#a","title":"a","text":"<ul> <li>axis_scale (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>axis (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_member_variables/#b","title":"b","text":"<ul> <li>buttons (pyspacemouse::pyspacemouse::ButtonCallback)</li> <li>button_callback (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>button_callback_arr (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>button_mapping (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#c","title":"c","text":"<ul> <li>callback (pyspacemouse::pyspacemouse::ButtonCallback, pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec, pyspacemouse::pyspacemouse::DofCallback)</li> <li>callback_minus (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_member_variables/#d","title":"d","text":"<ul> <li>dof_callback (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>dof_callback_arr (pyspacemouse::pyspacemouse::Config, pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>device (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>dict_state (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>dict_state_last (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#f","title":"f","text":"<ul> <li>filter (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_member_variables/#h","title":"h","text":"<ul> <li>hid_id (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#l","title":"l","text":"<ul> <li>led_id (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#n","title":"n","text":"<ul> <li>name (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#p","title":"p","text":"<ul> <li>product_name (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#s","title":"s","text":"<ul> <li>serial_number (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>set_nonblocking_loop (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>sleep (pyspacemouse::pyspacemouse::DofCallback)</li> </ul>"},{"location":"mouseApi/class_member_variables/#t","title":"t","text":"<ul> <li>tuple_state (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#v","title":"v","text":"<ul> <li>vendor_name (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>version_number (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_variables/#_","title":"_","text":"<ul> <li>__bytes_to_read (pyspacemouse::pyspacemouse::DeviceSpec)</li> <li>__mappings (pyspacemouse::pyspacemouse::DeviceSpec)</li> </ul>"},{"location":"mouseApi/class_member_typedefs/","title":"Class Member Typedefs","text":"<p>Nothing related to Class Member Typedefs found.</p>"},{"location":"mouseApi/class_member_enums/","title":"Class Member Enums","text":"<p>Nothing related to Class Member Enums found.</p>"},{"location":"mouseApi/namespace_members/","title":"Namespace Members","text":""},{"location":"mouseApi/namespace_members/#a","title":"a","text":"<ul> <li>AxisSpec (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#b","title":"b","text":"<ul> <li>ButtonSpec (pyspacemouse::pyspacemouse)</li> <li>butt_0 (pyspacemouse::pyspacemouse)</li> <li>butt_2_3 (pyspacemouse::pyspacemouse)</li> <li>button_callbacks_arr (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#c","title":"c","text":"<ul> <li>check_button_callback_arr (pyspacemouse::pyspacemouse)</li> <li>check_config (pyspacemouse::pyspacemouse)</li> <li>check_dof_callback_arr (pyspacemouse::pyspacemouse)</li> <li>close (pyspacemouse::pyspacemouse)</li> <li>config_remove (pyspacemouse::pyspacemouse)</li> <li>config_set (pyspacemouse::pyspacemouse)</li> <li>config_set_sep (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#d","title":"d","text":"<ul> <li>dev (pyspacemouse::pyspacemouse)</li> <li>device_specs (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#h","title":"h","text":"<ul> <li>high_acc_clock (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#l","title":"l","text":"<ul> <li>list_all_hid_devices (pyspacemouse::pyspacemouse)</li> <li>list_available_devices (pyspacemouse::pyspacemouse)</li> <li>list_devices (pyspacemouse::pyspacemouse)</li> <li>list_all_hid_devices_cli (pyspacemouse::pyspacemouse_cli)</li> <li>list_spacemouse_cli (pyspacemouse::pyspacemouse_cli)</li> <li>list_supported_devices_cli (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_members/#m","title":"m","text":"<ul> <li>main (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_members/#o","title":"o","text":"<ul> <li>open (pyspacemouse::pyspacemouse)</li> <li>openCfg (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#p","title":"p","text":"<ul> <li>print_buttons (pyspacemouse::pyspacemouse)</li> <li>print_state (pyspacemouse::pyspacemouse)</li> <li>print_version_cli (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_members/#r","title":"r","text":"<ul> <li>read (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#s","title":"s","text":"<ul> <li>SpaceNavigator (pyspacemouse::pyspacemouse)</li> <li>silent_callback (pyspacemouse::pyspacemouse)</li> <li>state (pyspacemouse::pyspacemouse)</li> <li>supported_devices (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_members/#t","title":"t","text":"<ul> <li>to_int16 (pyspacemouse::pyspacemouse)</li> <li>test_connect_cli (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_members/#_","title":"_","text":"<ul> <li>__version__ (pyspacemouse::pyspacemouse)</li> <li>_active_device (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/","title":"Namespace Member Functions","text":""},{"location":"mouseApi/namespace_member_functions/#b","title":"b","text":"<ul> <li>butt_0 (pyspacemouse::pyspacemouse)</li> <li>butt_2_3 (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#c","title":"c","text":"<ul> <li>check_button_callback_arr (pyspacemouse::pyspacemouse)</li> <li>check_config (pyspacemouse::pyspacemouse)</li> <li>check_dof_callback_arr (pyspacemouse::pyspacemouse)</li> <li>close (pyspacemouse::pyspacemouse)</li> <li>config_remove (pyspacemouse::pyspacemouse)</li> <li>config_set (pyspacemouse::pyspacemouse)</li> <li>config_set_sep (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#l","title":"l","text":"<ul> <li>list_all_hid_devices (pyspacemouse::pyspacemouse)</li> <li>list_available_devices (pyspacemouse::pyspacemouse)</li> <li>list_devices (pyspacemouse::pyspacemouse)</li> <li>list_all_hid_devices_cli (pyspacemouse::pyspacemouse_cli)</li> <li>list_spacemouse_cli (pyspacemouse::pyspacemouse_cli)</li> <li>list_supported_devices_cli (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#m","title":"m","text":"<ul> <li>main (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#o","title":"o","text":"<ul> <li>open (pyspacemouse::pyspacemouse)</li> <li>openCfg (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#p","title":"p","text":"<ul> <li>print_buttons (pyspacemouse::pyspacemouse)</li> <li>print_state (pyspacemouse::pyspacemouse)</li> <li>print_version_cli (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#r","title":"r","text":"<ul> <li>read (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#s","title":"s","text":"<ul> <li>silent_callback (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_functions/#t","title":"t","text":"<ul> <li>to_int16 (pyspacemouse::pyspacemouse)</li> <li>test_connect_cli (pyspacemouse::pyspacemouse_cli)</li> </ul>"},{"location":"mouseApi/namespace_member_variables/","title":"Namespace Member Variables","text":""},{"location":"mouseApi/namespace_member_variables/#a","title":"a","text":"<ul> <li>AxisSpec (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_variables/#b","title":"b","text":"<ul> <li>ButtonSpec (pyspacemouse::pyspacemouse)</li> <li>button_callbacks_arr (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_variables/#d","title":"d","text":"<ul> <li>dev (pyspacemouse::pyspacemouse)</li> <li>device_specs (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_variables/#h","title":"h","text":"<ul> <li>high_acc_clock (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_variables/#s","title":"s","text":"<ul> <li>SpaceNavigator (pyspacemouse::pyspacemouse)</li> <li>state (pyspacemouse::pyspacemouse)</li> <li>supported_devices (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_variables/#_","title":"_","text":"<ul> <li>__version__ (pyspacemouse::pyspacemouse)</li> <li>_active_device (pyspacemouse::pyspacemouse)</li> </ul>"},{"location":"mouseApi/namespace_member_typedefs/","title":"Namespace Member Typedefs","text":"<p>Nothing related to Namespace Member Typedefs found.</p>"},{"location":"mouseApi/namespace_member_enums/","title":"Namespace Member Enums","text":"<p>Nothing related to Namespace Member Enums found.</p>"},{"location":"mouseApi/functions/","title":"Functions","text":"<p>Nothing related to Functions found.</p>"},{"location":"mouseApi/macros/","title":"Macros","text":"<p>Nothing related to Macros found.</p>"},{"location":"mouseApi/variables/","title":"Variables","text":"<p>Nothing related to Variables found.</p>"},{"location":"mouseApi/links/","title":"Links","text":"<ul> <li>Related Pages</li> <li>Modules</li> <li>Class List</li> <li>Namespace ListNamespace List</li> <li>Namespace Members</li> <li>Namespace Member Functions</li> <li>Namespace Member Variables</li> <li>Namespace Member Typedefs</li> <li>Namespace Member Enumerations</li> <li>Class Index</li> <li>Class Hierarchy</li> <li>Class Members</li> <li>Class Member Functions</li> <li>Class Member Variables</li> <li>Class Member Typedefs</li> <li>Class Member Enumerations</li> <li>Files</li> <li>File Variables</li> <li>File Functions</li> <li>File Macros</li> </ul>"}]}